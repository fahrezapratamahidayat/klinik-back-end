// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum KlinikRole {
  Admin
  Pendaftaran
  Perawat
  Dokter
  Farmasi
  Kasir
  Pengguna
}

enum Gender {
  male
  female
}

enum MaritalStatus {
  S /// Single
  M /// Married
  W /// Widowed
  D /// Divorced
}

enum CitizenshipStatus {
  wni /// Warga Negara Indonesia
  wna /// Warga Negara Asing
}

enum IdentifierType {
  nik /// Nomor Induk Kependudukan
  nik_ibu /// Nomor Induk Kependudukan Ibu
  tanpa_nik /// Tanpa NIK
}

enum RelationshipType {
  orang_tua /// Orang Tua
  anak /// Anak
  pasangan /// Pasangan
  saudara /// Saudara
  kakek_nenek /// Kakek/Nenek
  cucu /// Cucu
  lainnya /// Lainnya
}

enum BloodType {
  a /// A
  b /// B
  ab /// AB
  o /// O
  tidak_tahu /// Tidak Tahu
}

enum Education {
  sd /// Sekolah Dasar
  smp /// Sekolah Menengah Pertama
  sma /// Sekolah Menengah Atas
  d3 /// Diploma Tiga
  s1 /// Sarjana Satu
  s2 /// Sarjana Dua
  s3 /// Sarjana Tiga
}

enum Religion {
  islam /// Islam
  kristen /// Kristen
  katolik /// Katolik
  hindu /// Hindu
  budha /// Budha
  konghucu /// Konghucu
  lainnya /// Lainnya
}

enum TelecomUse {
  home /// Rumah
  work /// Kerja
  temp /// Sementara
  old /// Lama
  mobile /// Ponsel
  other /// Lainnya
}

enum TelecomSystem {
  phone /// Telepon
  email /// Email
  other /// Lainnya
}

enum DoctorStatus {
  aktif /// Aktif
  tidak_aktif /// Tidak Aktif
  cuti /// Cuti
}

enum TindakanType {
  BEDAH /// Bedah
  PEMERIKSAAN /// Pemeriksaan
  TERAPI /// Terapi
  DIAGNOSTIK /// Diagnostik
  LAINNYA /// Lainnya
}

enum RoomStatus {
  active /// Ruangan aktif dan dapat digunakan
  inactive /// Ruangan tidak aktif sementara
  suspended /// Ruangan ditangguhkan penggunaannya
}

enum ServiceClass {
  vvip /// Very Important Person (Orang Penting)
  vip /// Important Person (Orang Penting)
  kelas_1 /// Kelas 1
  kelas_2 /// Kelas 2
  kelas_3 /// Kelas 3
  non_kelas /// Untuk ruangan tanpa klasifikasi kelas
}

enum Installation {
  rawat_inap /// Rawat Inap
  rawat_jalan /// Rawat Jalan
  gawat_darurat /// Gawat Darurat
  bedah_sentral /// Bedah Sentral
  laboratorium /// Laboratorium
  radiologi /// Radiologi
  farmasi /// Farmasi
  rehabilitasi_medik /// Rehabilitasi Medik
  hemodialisis /// Hemodialisis
  icu /// Intensive Care Unit (Unit Intensif)
  nicu /// Neonatal Intensive Care Unit (Unit Intensif Neonatal)
  picu /// Pediatric Intensive Care Unit (Unit Intensif Pediatrik)
  LAINNYA /// Untuk instalasi yang tidak tercantum
}

enum PhysicalType {
  bu /// Building (Gedung)
  wi /// Wing (Sayap)
  co /// Corridor (Koridor)
  ro /// Room (Ruangan)
  bd /// Bed (Tempat Tidur)
  ve /// Vehicle (Kendaraan)
  ho /// House (Rumah)
  ca /// Cabinet (Lemari)
  rd /// Road (Jalan)
  area /// Area
}

enum OperationalStatus {
  C /// Closed (Tutup)
  H /// Housekeeping (Pembersihan)
  I /// Isolated (Terisolasi)
  K /// Contaminated (Terkontaminasi)
  O /// Occupied (Terisi)
  U /// Unoccupied (Kosong)
}

enum UseRoom {
  usual /// Ruangan yang biasa digunakan
  official /// Ruangan yang digunakan untuk keperluan resmi
  temporary /// Ruangan yang digunakan sementara
  secondary /// Ruangan yang digunakan sebagai tempat lain setelah menggunakan ruangan utama
  old /// Ruangan yang sudah tidak digunakan lagi
}

enum LocationMode {
  instance /// Instalasi
  kind /// Jenis
}

enum LocationType {
  site /// Lokasi
  building /// Gedung
  wing /// Sayap
  ward /// Ruangan
  level /// Lantai
  room /// Ruangan
  bed /// Tempat Tidur
  vehicle /// Kendaraan
  house /// Rumah
  cabinet /// Lemari
  road /// Jalan
  area /// Area
  jurisdiction /// Wilayah
}

enum RegistrationStatus {
  draft
  dalam_antrian
  antrian_perawat
  dalam_pemeriksaan_perawat
  antrian_dokter
  dalam_pemeriksaan_dokter
  antrian_farmasi
  dalam_antrian_farmasi
  antrian_kasir
  dalam_antrian_kasir
  selesai
  cancel
}

enum EncounterType {
  rawat_jalan /// Rawat Jalan
  rawat_inap /// Rawat Inap
  igd /// Instalasi Gawat Darurat
}

enum EncounterStatus {
  planned /// Direncanakan
  arrived /// Pasien telah tiba
  triaged /// Pasien telah dilakukan triase
  in_progress /// Sedang dalam perawatan
  onleave /// Pasien sedang cuti
  finished /// Kunjungan selesai
  cancelled /// Kunjungan dibatalkan
}

enum AnamnesisType {
  keluhan_utama
  riwayat_penyakit
  riwayat_alergi
  riwayat_operasi
  riwayat_pengobatan
}

enum AnamnesisCategory {
  problem_list_item /// Problem List Item
  encounter_diagnosis /// Encounter Diagnosis
}

model Encounter {
  id                       String                     @id @default(uuid())
  patientRegistrationId    String
  patientRegistration      PatientRegistration        @relation(fields: [patientRegistrationId], references: [id], onDelete: Cascade)
  encounterType            EncounterType
  status                   EncounterStatus
  startDate                DateTime
  endDate                  DateTime?
  diagnosis                String?
  treatmentPlan            String?
  notes                    String?
  Anamnesis                Anamnesis[]
  PhysicalExamination      PhysicalExamination[]
  PsychologicalExamination PsychologicalExamination[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model Anamnesis {
  id                String            @id @default(uuid())
  encounterId       String
  encounter         Encounter         @relation(fields: [encounterId], references: [id])
  anamnesisType     AnamnesisType
  anamnesisCategory AnamnesisCategory
  anamnesisValue    String?
  anamnesisNote     String?
  recordedDate      DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model PhysicalExamination {
  id                String          @id @default(uuid())
  encounterId       String
  encounter         Encounter       @relation(fields: [encounterId], references: [id])
  examinationType   ExaminationType
  observationType   ObservationType
  effectiveDateTime DateTime
  valueQuantity     Float?
  valueUnit         String?
  valueString       String?
  valueCodeDisplay  String?
  performerId       String?
  performerName     String?
  note              String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum ExaminationType {
  vital_signs
  consciousness
  head_to_toe
  anthropometry
}

enum ObservationType {
  blood_pressure_systolic
  blood_pressure_diastolic
  body_temperature
  heart_rate
  respiratory_rate
  level_of_consciousness
  head
  eyes
  ears
  nose
  mouth
  throat
  neck
  chest
  lungs
  heart
  abdomen
  extremities
  skin
  neurological
  height
  weight
  body_surface_area
}

model PsychologicalExamination {
  id                String        @id @default(uuid())
  encounterId       String
  encounter         Encounter     @relation(fields: [encounterId], references: [id])
  examinationType   PsychExamType
  effectiveDateTime DateTime
  valueString       String?
  valueCodeDisplay  String?
  interpretasi      String?
  performerId       String?
  performerName     String?
  note              String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum PsychExamType {
  mood
  affect
  behavior
  thought_content
  thought_process
  perception
  cognition
  insight
  judgment
  memory
  attention
  concentration
  orientation
  speech
  psychomotor_activity
  suicidal_ideation
  homicidal_ideation
  substance_use
  coping_mechanisms
  social_support
  stress_level
  sleep_pattern
  appetite
  energy_level
  anxiety_level
  depression_screening
  other
}

// ------------------------------
// 1. ADMIN
// ------------------------------
model Doctor {
  id                  String                @id @default(uuid())
  name                String
  gender              Gender
  birthDate           DateTime
  birthPlace          String
  nip                 String               @unique
  nik                 String                @unique
  sip                 String                @unique
  str                 String                @unique
  bpjsCode            String?               @unique
  satuSehatId         String?               @unique
  specialization      String
  status              DoctorStatus          @default(aktif)
  address             Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId           String                @unique
  telecom             Telecom[]
  doctorSchedule      DoctorSchedule[]
  PatientRegistration PatientRegistration[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  type      String?
  alias     String?
  telecom   Telecom[]
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId String?   @unique
  rooms     Room[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Room {
  id                     String                @id @default(uuid())
  identifier             String                @unique
  use                    UseRoom               @default(usual)
  system                 String                @default("room")
  status                 RoomStatus            @default(active)
  operationalStatus      OperationalStatus     @default(O)
  name                   String
  alias                  String
  description            String
  mode                   LocationMode          @default(instance)
  type                   LocationType          @default(room)
  serviceClass           ServiceClass
  installation           Installation
  telecom                Telecom[]
  physicalType           PhysicalType          @default(ro)
  satuSehatId            String?               @unique
  availabilityExceptions String?
  longitude              Float?
  latitude               Float?
  altitude               Float?
  Tindakan               Tindakan[]
  HoursOfOperation       HoursOfOperation[]
  managingOrganization   Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId         String?
  address                Address?              @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId              String?               @unique
  doctorSchedule         DoctorSchedule[]
  PatientRegistration    PatientRegistration[]
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model HoursOfOperation {
  id          String   @id @default(uuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  daysOfWeek  String // Menyimpan sebagai "mon,tue,wed,thu,fri"
  allDay      Boolean
  openingTime String?
  closingTime String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tindakan {
  id             String       @id @default(uuid())
  name           String /// Nama Tindakan
  description    String?
  type           TindakanType
  icdCode        String? /// Kode ICD-9-CM atau ICD-10-PCS untuk prosedur
  snomed         String? /// Kode SNOMED CT untuk tindakan (digunakan di Satu Sehat)
  componentTarif String? /// Komponen Tarif (bisa berupa deskripsi komponen)
  baseTarif      Float /// Tarif Tindakan (tarif dasar)
  discountTarif  Float? /// Tarif Diskon (jika ada)
  cytoTarif      Float? /// Tarif Cyto (jika aplikabel)
  finalTarif     Float /// Tarif Akhir (setelah diskon, jika ada)
  finalCytoTarif Float? /// Tarif Akhir Cyto (jika aplikabel)
  bpjsCode       String? /// Kode tindakan BPJS (jika ada)
  isActive       Boolean      @default(true) /// Status keaktifan tindakan
  roomId         String
  room           Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Day {
  Minggu
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
  Sabtu
}

model DoctorSchedule {
  id                    String   @id @default(uuid())
  doctorId              String
  doctor                Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  roomId                String
  room                  Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  date                  DateTime
  day                   Day
  startTime             String
  endTime               String
  totalQuota            Int
  offlineQuota          Int
  onlineQuota           Int
  remainingOfflineQuota Int
  remainingOnlineQuota  Int
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([doctorId, date])
}

model Patient {
  id                        String                @id @default(uuid())
  medicalRecordNumber       String                @unique
  satuSehatId               String?               @unique
  bpjsCode                  String?               @unique
  identifierType            IdentifierType
  identifier                String?
  nomorKartuKeluarga        String
  name                      String
  birthDate                 DateTime
  birthPlace                String
  gender                    Gender
  multipleBirthInteger      Int
  bloodType                 BloodType?
  education                 Education?
  religion                  Religion?
  address                   Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId                 String                @unique
  telecom                   Telecom[]
  maritalStatus             MaritalStatus?
  citizenshipStatus         CitizenshipStatus
  relatedPersons            RelatedPerson[]
  responsiblePersonName     String
  responsiblePersonRelation RelationshipType
  responsiblePersonPhone    String
  isResponsiblePersonSelf   Boolean               @default(false)
  PatientRegistration       PatientRegistration[]
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt

  @@unique([name, birthDate, gender])
}

model PatientRegistration {
  id                 String             @id @default(uuid())
  registrationNumber String             @unique
  patientId          String
  patient            Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId           String
  doctor             Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  roomId             String
  room               Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  paymentMethodId    String
  PaymentMethod      PaymentMethod?     @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  registrationDate   DateTime
  status             RegistrationStatus @default(draft)
  Encounter          Encounter[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model RelatedPerson {
  id           String    @id @default(uuid())
  patientId    String
  patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  relationType String
  name         String
  gender       Gender
  birthDate    DateTime
  address      Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    String    @unique
  telecom      Telecom[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Address {
  id            String           @id @default(uuid())
  use           String?          @default("home") /// rumah, kantor, sementara, lama, lainnya
  line          String /// jalan, gedung, koridor, ruangan, tempat tidur, kendaraan, rumah, lemari, jalan, area
  city          String? /// kota, kabupaten, provinsi
  postalCode    String? /// kode pos
  country       String           @default("ID") /// negara
  extension     AddressExtension @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  extensionId   String           @unique
  patient       Patient?
  RelatedPerson RelatedPerson?
  Doctor        Doctor?
  Organization  Organization?
  Room          Room?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model AddressExtension {
  id              String      @id @default(uuid())
  province        Province    @relation(fields: [provinceCode], references: [code], onDelete: Cascade)
  provinceCode    String
  district        District    @relation(fields: [districtCode], references: [code], onDelete: Cascade)
  districtCode    String
  subdistrict     Subdistrict @relation(fields: [subdistrictCode], references: [code], onDelete: Cascade)
  subdistrictCode String
  village         Village     @relation(fields: [villageCode], references: [code], onDelete: Cascade)
  villageCode     String
  rt              String?
  rw              String?
  address         Address?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Telecom {
  id              String         @id @default(uuid())
  system          TelecomSystem  @default(phone)
  use             TelecomUse     @default(home)
  value           String
  patient         Patient?       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId       String?
  RelatedPerson   RelatedPerson? @relation(fields: [relatedPersonId], references: [id], onDelete: Cascade)
  relatedPersonId String?
  Doctor          Doctor?        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId        String?
  Room            Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String?
  Organization    Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model PaymentMethod {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String?
  isActive             Boolean               @default(true)
  patientRegistrations PatientRegistration[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Province {
  name             String
  code             String             @unique
  District         District[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model District {
  name             String
  code             String             @unique
  provinceCode     String
  province         Province           @relation(fields: [provinceCode], references: [code], onDelete: Cascade)
  Subdistrict      Subdistrict[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Subdistrict {
  name             String
  code             String             @unique
  districtCode     String
  district         District           @relation(fields: [districtCode], references: [code], onDelete: Cascade)
  Village          Village[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Village {
  name             String
  code             String             @unique
  subdistrictCode  String
  subdistrict      Subdistrict        @relation(fields: [subdistrictCode], references: [code], onDelete: Cascade)
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}
