// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  Admin
  Pendaftaran
  Perawat
  Dokter
  Farmasi
  Kasir
  Pengguna
}

enum Gender {
  male
  female
}

enum MaritalStatus {
  S /// Single
  M /// Married
  W /// Widowed
  D /// Divorced
}

enum CitizenshipStatus {
  wni /// Warga Negara Indonesia
  wna /// Warga Negara Asing
}

enum IdentifierType {
  nik /// Nomor Induk Kependudukan
  nik_ibu /// Nomor Induk Kependudukan Ibu
  tanpa_nik /// Tanpa NIK
}

enum RelationshipType {
  orang_tua /// Orang Tua
  anak /// Anak
  pasangan /// Pasangan
  saudara /// Saudara
  kakek_nenek /// Kakek/Nenek
  cucu /// Cucu
  lainnya /// Lainnya
}

enum BloodType {
  a /// A
  b /// B
  ab /// AB
  o /// O
  tidak_tahu /// Tidak Tahu
}

enum Education {
  sd /// Sekolah Dasar
  smp /// Sekolah Menengah Pertama
  sma /// Sekolah Menengah Atas
  d3 /// Diploma Tiga
  s1 /// Sarjana Satu
  s2 /// Sarjana Dua
  s3 /// Sarjana Tiga
}

enum Religion {
  islam /// Islam
  kristen /// Kristen
  katolik /// Katolik
  hindu /// Hindu
  budha /// Budha
  konghucu /// Konghucu
  lainnya /// Lainnya
}

enum TelecomUse {
  home /// Rumah
  work /// Kerja
  temp /// Sementara
  old /// Lama
  mobile /// Ponsel
  other /// Lainnya
}

enum TelecomSystem {
  phone /// Telepon
  email /// Email
  other /// Lainnya
}

enum DoctorStatus {
  aktif /// Aktif
  tidak_aktif /// Tidak Aktif
  cuti /// Cuti
}

enum TindakanType {
  BEDAH /// Bedah
  PEMERIKSAAN /// Pemeriksaan
  TERAPI /// Terapi
  DIAGNOSTIK /// Diagnostik
  LAINNYA /// Lainnya
}

enum RoomStatus {
  active /// Ruangan aktif dan dapat digunakan
  inactive /// Ruangan tidak aktif sementara
  suspended /// Ruangan ditangguhkan penggunaannya
}

// enum ServiceClass {
//   vvip /// Very Important Person (Orang Penting)
//   vip /// Important Person (Orang Penting)
//   kelas_1 /// Kelas 1
//   kelas_2 /// Kelas 2
//   kelas_3 /// Kelas 3
//   non_kelas /// Untuk ruangan tanpa klasifikasi kelas
// }

enum Installation {
  rawat_inap /// Rawat Inap
  rawat_jalan /// Rawat Jalan
  gawat_darurat /// Gawat Darurat
  bedah_sentral /// Bedah Sentral
  laboratorium /// Laboratorium
  radiologi /// Radiologi
  farmasi /// Farmasi
  rehabilitasi_medik /// Rehabilitasi Medik
  hemodialisis /// Hemodialisis
  icu /// Intensive Care Unit (Unit Intensif)
  nicu /// Neonatal Intensive Care Unit (Unit Intensif Neonatal)
  picu /// Pediatric Intensive Care Unit (Unit Intensif Pediatrik)
  LAINNYA /// Untuk instalasi yang tidak tercantum
}

enum PhysicalType {
  bu /// Building (Gedung)
  wi /// Wing (Sayap)
  co /// Corridor (Koridor)
  ro /// Room (Ruangan)
  bd /// Bed (Tempat Tidur)
  ve /// Vehicle (Kendaraan)
  ho /// House (Rumah)
  ca /// Cabinet (Lemari)
  rd /// Road (Jalan)
  area /// Area
}

enum OperationalStatus {
  C /// Closed (Tutup)
  H /// Housekeeping (Pembersihan)
  I /// Isolated (Terisolasi)
  K /// Contaminated (Terkontaminasi)
  O /// Occupied (Terisi)
  U /// Unoccupied (Kosong)
}

enum UseRoom {
  usual /// Ruangan yang biasa digunakan
  official /// Ruangan yang digunakan untuk keperluan resmi
  temporary /// Ruangan yang digunakan sementara
  secondary /// Ruangan yang digunakan sebagai tempat lain setelah menggunakan ruangan utama
  old /// Ruangan yang sudah tidak digunakan lagi
}

enum LocationMode {
  instance /// Instalasi
  kind /// Jenis
}

enum LocationType {
  site /// Lokasi
  building /// Gedung
  wing /// Sayap
  ward /// Ruangan
  level /// Lantai
  room /// Ruangan
  bed /// Tempat Tidur
  vehicle /// Kendaraan
  house /// Rumah
  cabinet /// Lemari
  road /// Jalan
  area /// Area
  jurisdiction /// Wilayah
}

enum RegistrationStatus {
  draft
  dalam_antrian
  antrian_perawat
  dalam_pemeriksaan_perawat
  antrian_dokter
  dalam_pemeriksaan_dokter
  antrian_farmasi
  dalam_antrian_farmasi
  antrian_kasir
  dalam_antrian_kasir
  selesai
  cancel
}

enum EncounterType {
  rawat_jalan /// Rawat Jalan
  rawat_inap /// Rawat Inap
  igd /// Instalasi Gawat Darurat
}

enum EncounterStatus {
  planned /// Direncanakan
  arrived /// Pasien telah tiba
  triaged /// Pasien telah dilakukan triase
  in_progress /// Sedang dalam perawatan
  onleave /// Pasien sedang cuti
  finished /// Kunjungan selesai
  cancelled /// Kunjungan dibatalkan
}

enum MedicineCategory {
  ANALGESIK /// Obat pereda nyeri
  ANTIBIOTIK /// Antibiotik
  ANTIDIABETES /// Obat diabetes
  ANTIHIPERTENSI /// Obat tekanan darah tinggi
  ANTIHISTAMIN /// Obat alergi
  VITAMIN /// Vitamin dan suplemen
  LAINNYA /// Kategori lainnya
}

enum MedicineForm {
  TABLET /// Tablet
  KAPSUL /// Kapsul
  SIRUP /// Sirup
  SALEP /// Salep
  DROPS /// Tetes
  INJEKSI /// Suntikan
  SUPPOSITORIA /// Suppositoria
  INHALER /// Inhaler
  LAINNYA /// Bentuk lainnya
}

enum PrescriptionStatus {
  draft /// Draft resep
  confirmed /// Resep dikonfirmasi dokter
  processed /// Sedang diproses farmasi
  dispensed /// Obat telah diserahkan
  cancelled /// Resep dibatalkan
}

enum MedicineUnit {
  TABLET /// Tablet
  KAPSUL /// Kapsul
  ML /// Mililiter
  MG /// Miligram
  GRAM /// Gram
  SACHET /// Sachet
  BOTOL /// Botol
  AMPUL /// Ampul
  PCS /// Pieces
  TUBE /// Tube
}

enum MedicineTransactionType {
  IN /// Penambahan stok
  OUT /// Pengurangan stok
  ADJUSTMENT /// Penyesuaian stok
  EXPIRED /// Obat kadaluarsa
  DAMAGED /// Obat rusak
}

enum DiagnosisType {
  primary /// Diagnosa utama
  secondary /// Diagnosa sekunder
  working /// Diagnosa kerja
  differential /// Diagnosa banding
}

enum AccountType {
  STAFF /// Untuk pegawai internal (pendaftaran, farmasi, kasir dll)
  DOCTOR /// Untuk dokter
  PATIENT /// Untuk pasien
}

model Account {
  id           String      @id @default(uuid())
  username     String      @unique
  email        String      @unique
  password     String
  type         AccountType
  role         UserRole
  isActive     Boolean     @default(true)
  lastLoginAt  DateTime?
  refreshToken String?
  doctor       Doctor?     @relation("AccountDoctor") // Tambahkan nama relasi
  staff        Staff?      @relation("AccountStaff")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?
  updatedBy    String?

  @@index([type])
  @@map("accounts")
}

model Staff {
  id        String   @id @default(uuid())
  accountId String   @unique
  account   Account  @relation("AccountStaff", fields: [accountId], references: [id], onDelete: Cascade)
  nip       String   @unique
  name      String
  position  UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@map("staffs")
}

model Encounter {
  id                       String                    @id @default(uuid())
  patientRegistrationId    String                    @unique
  patientRegistration      PatientRegistration       @relation(fields: [patientRegistrationId], references: [id], onDelete: Cascade)
  encounterType            EncounterType
  status                   EncounterStatus
  startDate                DateTime
  endDate                  DateTime?
  treatmentPlan            String?
  notes                    String?
  anamnesis                Anamnesis?
  physicalExamination      PhysicalExamination?
  psychologicalExamination PsychologicalExamination?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  encounterTimeline        EncounterTimeline[]
  prescriptions            Prescriptions[]
  diagnosis                Diagnosis[]
  procedure                Procedure[]
  payment                  Payment?
}

model EncounterTimeline {
  id          String             @id @default(uuid())
  encounterId String
  encounter   Encounter          @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  status      RegistrationStatus
  timestamp   DateTime
  performedBy String
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([encounterId])
}

model Anamnesis {
  id          String    @id @default(uuid())
  encounterId String    @unique
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  // Keluhan Utama
  chiefComplaint      String?
  durationOfComplaint String?
  locationOfComplaint String?

  // Riwayat Medis
  currentIllnessHistory String?
  pastMedicalHistory    String?
  familyMedicalHistory  String?

  // Riwayat Alergi
  drugAllergyHistory  String?
  foodAllergyHistory  String?
  otherAllergyHistory String?

  // Riwayat Pengobatan
  medicationHistory  String?
  currentMedications String?

  // Riwayat Operasi
  surgicalHistory String?

  // Riwayat Gaya Hidup
  smoking           Boolean?
  cigarettesPerDay  Int?
  alcohol           Boolean?
  alcoholFrequency  String?
  exercise          String?
  exerciseFrequency String?

  // Riwayat Ginekologi (untuk pasien wanita)
  menarche             Int? // Usia menstruasi pertama
  menstrualCycle       String?
  menstruationDuration Int? // dalam hari
  lastMenstrualPeriod  DateTime? // Periode Menstruasi Terakhir
  parity               String? // Format: G(Gravida)P(Para)A(Abortus), contoh: G3P2A1

  // Riwayat Kehamilan (jika hamil)
  gestationalAge         Int? // dalam minggu
  fetalMovement          String?
  pregnancyComplications String?
  deliveryHistory        String?

  // Riwayat Imunisasi
  immunizationHistory String?

  // Riwayat Nutrisi
  dietPattern String?
  specialDiet String?

  // Riwayat Tidur
  sleepPattern  String?
  sleepDuration Int? // dalam jam

  // Pola Eliminasi
  urinationPattern  String?
  defecationPattern String?

  // Informasi Tambahan
  additionalInformation String?

  recordedDate DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PhysicalExamination {
  id          String    @id @default(uuid())
  encounterId String    @unique
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  // Tanda Vital
  bloodPressureSystolic  Int? // Tekanan darah sistol
  bloodPressureDiastolic Int? // Tekanan darah diastol
  bodyTemperature        Float? // Suhu tubuh
  heartRate              Int? // Denyut nadi
  respiratoryRate        Int? // Laju pernapasan

  // Kesadaran
  levelOfConsciousness String? // Kesadaran (baik/sedang/buruk)

  generalCondition String? // Keadaan umum (baik/sedang/buruk)

  // Pemeriksaan Fisik
  head         String? // kepala (benjolan, nyeri tekan, dll)
  eyes         String? // mata (konjungtiva, sklera, dll)
  ears         String? // telinga (serumen, nyeri, dll)
  nose         String? // hidung (sekret, polip, dll)
  mouth        String? // mulut (lidah, gigi, dll)
  throat       String? // tenggorokan (faring, tonsil, dll)
  neck         String? // leher (JVP, kelenjar getah bening, dll)
  chest        String? // dada (simetris/asimetris, retraksi)
  lungs        String? // paru (suara napas, ronkhi, wheezing)
  heart        String? // jantung (suara jantung, gallop, murmur)
  abdomen      String? // perut (nyeri tekan, masa, organomegali)
  extremities  String? // ekstremitas (edema, varises, sianosis)
  skin         String? // kulit (ruam, lesi, warna)
  neurological String? // neurologis (refleks, kekuatan otot)

  // Antropometri 
  height          Float? // Tinggi badan
  weight          Float? // Berat badan
  bodySurfaceArea Float? // IMT

  // Catatan
  note String?

  effectiveDateTime DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PsychologicalExamination {
  id          String    @id @default(uuid())
  encounterId String    @unique
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  mood                String? // mood
  affect              String? // perasaan
  behavior            String? // perilaku
  thoughtContent      String? // isi pikiran
  thoughtProcess      String? // proses pikiran
  perception          String? // persepsi
  cognition           String? // pemahaman
  insight             String? // pemahaman diri
  judgment            String? // penilaian
  memory              String? // ingatan
  attention           String? // perhatian
  concentration       String? // konsentrasi
  orientation         String? // orientasi
  speech              String? // bicara
  psychomotorActivity String? // aktivitas fisik
  suicidalIdeation    String? // pemikiran bunuh diri
  homicidalIdeation   String? // pemikiran bunuh diri
  substanceUse        String? // penggunaan narkoba
  copingMechanisms    String? // mekanisme menangani stres
  socialSupport       String? // dukungan sosial
  stressLevel         String? // tingkat stres
  sleepPattern        String? // pola tidur
  appetite            String? // nafsu makan
  energyLevel         String? // tingkat energi
  anxietyLevel        String? // tingkat kecemasan
  depressionScreening String? // screening depresi
  other               String? // lainnya

  interpretasi String? // interpretasi
  note         String? // catatan

  effectiveDateTime DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Prescriptions {
  id                 String             @id @default(uuid())
  prescriptionNumber String             @unique /// Nomor resep
  encounterId        String /// ID kunjungan
  encounter          Encounter          @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  medicine           Medicine           @relation(fields: [medicineId], references: [id])
  medicineId         String
  quantity           Int /// Jumlah obat
  dosage             String /// Dosis (misal: 3x1)
  route              String /// Rute pemberian (oral, topical, dll)
  frequency          String /// Frekuensi pemberian
  duration           Int /// Durasi penggunaan (dalam hari)
  notes              String? /// Catatan tambahan
  notesPharmacy      String? /// Catatan apoteker
  status             PrescriptionStatus @default(draft)
  dispensedAt        DateTime? /// Waktu obat diserahkan
  dispensedBy        String? /// Petugas yang menyerahkan
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([encounterId])
}

model Icd10 {
  id          Int         @id @default(autoincrement())
  code        String      @unique /// Kode ICD-10
  name        String /// Nama penyakit/kondisi
  description String? /// Deskripsi detail
  category    String? /// Kategori penyakit
  diagnoses   Diagnosis[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Icd9 {
  id          Int         @id @default(autoincrement())
  code        String      @unique /// Kode ICD-9-CM
  name        String /// Nama prosedur
  description String? /// Deskripsi detail
  category    String? /// Kategori prosedur
  procedures  Procedure[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Diagnosis {
  id          Int           @id @default(autoincrement())
  encounterId String
  encounter   Encounter     @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  icd10Id     Int
  icd10       Icd10         @relation(fields: [icd10Id], references: [id])
  type        DiagnosisType
  notes       String? /// Catatan tambahan untuk diagnosa
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  @@index([encounterId])
  @@index([icd10Id])
}

model Procedure {
  id          String    @id @default(uuid())
  encounterId String
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  icd9Id      Int
  icd9        Icd9      @relation(fields: [icd9Id], references: [id])
  notes       String? /// Catatan prosedur
  performedAt DateTime /// Waktu prosedur dilakukan
  performedBy String /// Petugas yang melakukan prosedur
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([encounterId])
  @@index([icd9Id])
}

model Medicine {
  id                  String                @id @default(uuid())
  code                String                @unique /// Kode obat
  name                String /// Nama obat
  genericName         String? /// Nama generik
  category            MedicineCategory
  form                MedicineForm
  unit                MedicineUnit
  composition         String? /// Komposisi obat
  manufacturer        String? /// Pabrikan
  description         String? /// Deskripsi/kegunaan
  indication          String? /// Indikasi
  contraindication    String? /// Kontraindikasi
  sideEffect          String? /// Efek samping
  doseRange           String? /// Rentang dosis yang direkomendasikan
  storageMethod       String? /// Cara penyimpanan
  price               Float /// Harga jual
  stock               Int /// Stok tersedia
  minimumStock        Int /// Stok minimum
  expiryDate          DateTime? /// Tanggal kadaluarsa
  bpjsCode            String?               @unique /// Kode BPJS
  isActive            Boolean               @default(true)
  prescriptions       Prescriptions[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  MedicineTransaction MedicineTransaction[]
}

model MedicineTransaction {
  id              String                  @id @default(uuid())
  transactionType MedicineTransactionType
  medicineId      String
  medicine        Medicine                @relation(fields: [medicineId], references: [id])
  quantity        Int
  price           Float
  batchNumber     String? /// Nomor batch
  expiryDate      DateTime? /// Tanggal kadaluarsa batch
  notes           String?
  performedBy     String /// Petugas yang melakukan transaksi
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([medicineId])
}

enum PaymentStatus {
  pending
  paid
  cancelled
  refunded
  challenge
  deny
  expire
}

enum PaymentType {
  medicine
  consultation
  procedure
  other
  serviceClass
}

model Payment {
  id              String          @id @default(uuid())
  paymentNumber   String          @unique
  encounterId     String          @unique
  encounter       Encounter       @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  firstName       String
  lastName        String
  email           String
  phone           String
  midtransOrderId String?         @unique
  midtransToken   String?
  paymentUrl      String?
  totalAmount     Float
  paymentStatus   PaymentStatus   @default(pending)
  paidAt          DateTime?
  paidBy          String?
  notes           String?
  paymentDetail   PaymentDetail[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([encounterId])
}

model PaymentDetail {
  id        String      @id @default(uuid())
  paymentId String
  payment   Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  itemId    String // ID dari item yang dibayar (bisa prescription.id, procedure.id, dll)
  itemType  PaymentType // Jenis item yang dibayar
  quantity  Int
  price     Float
  subtotal  Float
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([paymentId])
}

model Doctor {
  id                  String                @id @default(uuid())
  accountId           String                @unique
  account             Account               @relation("AccountDoctor", fields: [accountId], references: [id], onDelete: Cascade)
  name                String
  gender              Gender
  birthDate           DateTime
  birthPlace          String
  nip                 String                @unique
  nik                 String                @unique
  sip                 String                @unique
  str                 String                @unique
  bpjsCode            String?               @unique
  satuSehatId         String?               @unique
  specialization      String
  consultationFee     Float
  status              DoctorStatus          @default(aktif)
  address             Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId           String                @unique
  telecom             Telecom[]
  doctorSchedule      DoctorSchedule[]
  PatientRegistration PatientRegistration[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ServiceClass {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float
  Room        Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id                     String                @id @default(uuid())
  identifier             String                @unique
  use                    UseRoom               @default(usual)
  system                 String                @default("room")
  status                 RoomStatus            @default(active)
  operationalStatus      OperationalStatus     @default(O)
  name                   String
  alias                  String
  description            String
  mode                   LocationMode          @default(instance)
  type                   LocationType          @default(room)
  serviceClassId         String
  serviceClass           ServiceClass          @relation(fields: [serviceClassId], references: [id])
  installation           Installation
  telecom                Telecom[]
  physicalType           PhysicalType          @default(ro)
  satuSehatId            String?               @unique
  availabilityExceptions String?
  longitude              Float?
  latitude               Float?
  altitude               Float?
  Tindakan               Tindakan[]
  HoursOfOperation       HoursOfOperation[]
  address                Address?              @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId              String?               @unique
  doctorSchedule         DoctorSchedule[]
  PatientRegistration    PatientRegistration[]
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model HoursOfOperation {
  id          String   @id @default(uuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  daysOfWeek  String // Menyimpan sebagai "mon,tue,wed,thu,fri"
  allDay      Boolean
  openingTime String?
  closingTime String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tindakan {
  id             String       @id @default(uuid())
  name           String /// Nama Tindakan
  description    String?
  type           TindakanType
  icdCode        String? /// Kode ICD-9-CM atau ICD-10-PCS untuk prosedur
  snomed         String? /// Kode SNOMED CT untuk tindakan (digunakan di Satu Sehat)
  componentTarif String? /// Komponen Tarif (bisa berupa deskripsi komponen)
  baseTarif      Float /// Tarif Tindakan (tarif dasar)
  discountTarif  Float? /// Tarif Diskon (jika ada)
  cytoTarif      Float? /// Tarif Cyto (jika aplikabel)
  finalTarif     Float /// Tarif Akhir (setelah diskon, jika ada)
  finalCytoTarif Float? /// Tarif Akhir Cyto (jika aplikabel)
  bpjsCode       String? /// Kode tindakan BPJS (jika ada)
  isActive       Boolean      @default(true) /// Status keaktifan tindakan
  roomId         String
  room           Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Day {
  Minggu
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
  Sabtu
}

model DoctorSchedule {
  id                    String   @id @default(uuid())
  doctorId              String
  doctor                Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  roomId                String
  room                  Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  date                  DateTime
  day                   Day
  startTime             String
  endTime               String
  totalQuota            Int
  offlineQuota          Int
  onlineQuota           Int
  remainingOfflineQuota Int
  remainingOnlineQuota  Int
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([doctorId, roomId, date, startTime, endTime])
}

model Patient {
  id                        String                @id @default(uuid())
  medicalRecordNumber       String                @unique
  satuSehatId               String?               @unique
  bpjsCode                  String?               @unique
  identifierType            IdentifierType
  identifier                String?
  nomorKartuKeluarga        String
  name                      String
  birthDate                 DateTime
  birthPlace                String
  gender                    Gender
  multipleBirthInteger      Int
  bloodType                 BloodType?
  education                 Education?
  religion                  Religion?
  address                   Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId                 String                @unique
  telecom                   Telecom[]
  maritalStatus             MaritalStatus?
  citizenshipStatus         CitizenshipStatus
  relatedPersons            RelatedPerson[]
  responsiblePersonName     String
  responsiblePersonRelation RelationshipType
  responsiblePersonPhone    String
  isResponsiblePersonSelf   Boolean               @default(false)
  PatientRegistration       PatientRegistration[]
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt

  @@unique([name, birthDate, gender])
}

enum RegistrationType {
  offline
  online
}

model PatientRegistration {
  id                 String             @id @default(uuid())
  registrationNumber String             @unique
  queueNumber        Int
  registrationType   RegistrationType   @default(offline)
  patientId          String
  patient            Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId           String
  doctor             Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  roomId             String
  room               Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  registrationDate   DateTime
  status             RegistrationStatus @default(draft)
  encounter          Encounter?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model RelatedPerson {
  id           String    @id @default(uuid())
  patientId    String
  patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  relationType String
  name         String
  gender       Gender
  birthDate    DateTime
  address      Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    String    @unique
  telecom      Telecom[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Address {
  id            String           @id @default(uuid())
  use           String           @default("home")
  line          String
  city          String
  postalCode    String
  country       String           @default("ID")
  extension     AddressExtension @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  extensionId   String           @unique
  patient       Patient?
  RelatedPerson RelatedPerson?
  Doctor        Doctor?
  Room          Room?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model AddressExtension {
  id              String      @id @default(uuid())
  province        Province    @relation(fields: [provinceCode], references: [code], onDelete: Cascade)
  provinceCode    String
  district        District    @relation(fields: [districtCode], references: [code], onDelete: Cascade)
  districtCode    String
  subdistrict     Subdistrict @relation(fields: [subdistrictCode], references: [code], onDelete: Cascade)
  subdistrictCode String
  village         Village     @relation(fields: [villageCode], references: [code], onDelete: Cascade)
  villageCode     String
  rt              String?
  rw              String?
  address         Address?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Telecom {
  id              String         @id @default(uuid())
  system          TelecomSystem  @default(phone)
  use             TelecomUse     @default(home)
  value           String
  patient         Patient?       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId       String?
  RelatedPerson   RelatedPerson? @relation(fields: [relatedPersonId], references: [id], onDelete: Cascade)
  relatedPersonId String?
  Doctor          Doctor?        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId        String?
  Room            Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Province {
  name             String
  code             String             @unique
  District         District[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

model District {
  name             String
  code             String             @unique
  provinceCode     String
  province         Province           @relation(fields: [provinceCode], references: [code], onDelete: Cascade)
  Subdistrict      Subdistrict[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

model Subdistrict {
  name             String
  code             String             @unique
  districtCode     String
  district         District           @relation(fields: [districtCode], references: [code], onDelete: Cascade)
  Village          Village[]
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

model Village {
  name             String
  code             String             @unique
  subdistrictCode  String
  subdistrict      Subdistrict        @relation(fields: [subdistrictCode], references: [code], onDelete: Cascade)
  AddressExtension AddressExtension[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}
